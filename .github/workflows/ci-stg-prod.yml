name: CI â€¢ Staging & Production

on:
  push:
    branches: [ main ]

permissions:
  contents: write   # needed for creating releases / uploading assets

jobs:
  # 1) BUILD
  build:
    runs-on: ubuntu-latest
    outputs:
      artifact_name: build-artifact
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install
        run: npm install

      - name: (Optional) Build
        run: |
          # If you have no build step, keep as a no-op or remove
          npm run build || echo "No build script; skipping."

      - name: Package
        run: zip -r build.zip .

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: build.zip

  # 2) DEPLOY STAGING
  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    environment: staging
    permissions:
      contents: write
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Prepare tag/notes (staging)
        run: |
          # Tag priority: Environment/Repo var STAGING_TAG > fallback staging-v{run_number}
          if [ -z "${{ vars.STAGING_TAG }}" ]; then
            echo "TAG=staging-v${{ github.run_number }}" >> $GITHUB_ENV
          else
            echo "TAG=${{ vars.STAGING_TAG }}" >> $GITHUB_ENV
          fi
          # Notes priority: RELEASE_NOTE > default text for staging
          if [ -z "${{ vars.RELEASE_NOTE }}" ]; then
            echo "NOTE=Testing pre-production release" >> $GITHUB_ENV
          else
            echo "NOTE=${{ vars.RELEASE_NOTE }}" >> $GITHUB_ENV
          fi

      - name: Create staging release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "$TAG" build.zip \
            --title "$TAG" \
            --notes "$NOTE" \
            --target "${{ github.sha }}"

  # 3) DEPLOY PRODUCTION (runs only after staging succeeds)
  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment: production   # <-- protection rules + manual approval live here
    permissions:
      contents: write
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Prepare tag/notes (production)
        run: |
          # Tag priority: Environment/Repo var PROD_TAG > fallback prod-v{run_number}
          if [ -z "${{ vars.PROD_TAG }}" ]; then
            echo "TAG=prod-v${{ github.run_number }}" >> $GITHUB_ENV
          else
            echo "TAG=${{ vars.PROD_TAG }}" >> $GITHUB_ENV
          fi
          # Notes priority: RELEASE_NOTE > simple default
          if [ -z "${{ vars.RELEASE_NOTE }}" ]; then
            echo "NOTE=Production release" >> $GITHUB_ENV
          else
            echo "NOTE=${{ vars.RELEASE_NOTE }}" >> $GITHUB_ENV
          fi

      - name: Create production release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "$TAG" build.zip \
            --title "$TAG" \
            --notes "$NOTE" \
            --target "${{ github.sha }}"
