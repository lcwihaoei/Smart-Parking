name: CI Dev Deployment

on:
  push:
    branches:
      - main

permissions:
  contents: write  # 產生 release / 上傳檔案需要 write 權限

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      artifact-path: ${{ steps.build-artifact.outputs.artifact-path }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Build / Test
        run: |
          npm install
          npm run build

      - name: Package artifact
        id: build-artifact
        run: |
          # 這邊假設把整個 build output 裝進 zip
          zip -r build.zip . 
          echo "artifact-path=build.zip" >> $GITHUB_OUTPUT

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: build.zip

  deploy-dev:
  needs: build
  runs-on: ubuntu-latest
  environment: dev
  permissions:
    contents: write
  steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: build-artifact

    - name: Ensure TAG and NOTE (fallback if not set)
      run: |
        # 若 Environment/Repo 沒有設 BUILD_TAG，就自動產生：dev-v<run_number>
        if [ -z "${{ vars.BUILD_TAG }}" ]; then
          echo "TAG=dev-v${{ github.run_number }}" >> $GITHUB_ENV
        else
          echo "TAG=${{ vars.BUILD_TAG }}" >> $GITHUB_ENV
        fi

        # 若沒有 RELEASE_NOTE，給預設說明
        if [ -z "${{ vars.RELEASE_NOTE }}" ]; then
          echo "NOTE=Dev auto release from ${{ github.sha }}" >> $GITHUB_ENV
        else
          echo "NOTE=${{ vars.RELEASE_NOTE }}" >> $GITHUB_ENV
        fi

    - name: Create Dev Release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "Creating release tag: $TAG"
        # --title 可明確命名，--target 指定這次提交
        gh release create "$TAG" build.zip \
          --title "$TAG" \
          --notes "$NOTE" \
          --target "${{ github.sha }}"

