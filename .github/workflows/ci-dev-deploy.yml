name: deploy-dev

on:
  workflow_dispatch:
    inputs:
      simulate_build_fail:
        description: "Simulate build failure"
        type: boolean
        default: false
      simulate_release_fail:
        description: "Simulate release failure"
        type: boolean
        default: false
      simulate_slack_fail:
        description: "Simulate Slack notification failure"
        type: boolean
        default: false
      simulate_artifact_download_fail:
        description: "Simulate artifact download failure"
        type: boolean
        default: false
      tag:
        description: "Release tag (optional)"
        required: false
        default: ""

permissions:
  contents: write
  id-token: write

env:
  ARTIFACT_NAME: dist-artifact
  FALLBACK_ARTIFACT_NAME: dist-artifact

jobs:
  deploy-dev:
    runs-on: ubuntu-latest

    steps:
      - name: Set up job
        run: echo "Starting deploy-dev"

      # ✅ 下載產物（可選擇讓它失敗）
      - name: Download artifact (or fail if simulated)
        id: dl
        uses: actions/download-artifact@v4
        if: ${{ inputs.simulate_artifact_download_fail == false }}
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ./dist

      - name: Simulate artifact download failure
        if: ${{ inputs.simulate_artifact_download_fail == true }}
        run: |
          echo "::warning::Simulating artifact download failure"
          exit 1

      - name: Ensure TAG/NOTE (fallbacks)
        id: tagprep
        run: |
          echo "TAG=${{ inputs.tag != '' && inputs.tag || format('dev-{0}', github.run_number) }}" >> $GITHUB_OUTPUT
          echo "NOTE=Dev release for run ${{ github.run_number }}" >> $GITHUB_OUTPUT

      - name: Ensure .git exists (for gh)
        run: |
          if [ ! -d .git ]; then
            git init
            git remote add origin "${{ github.server_url }}/${{ github.repository }}"
            git fetch --depth=1 origin ${{ github.ref_name }}
            git checkout -B ${{ github.ref_name }}
          fi

      # ✅ 模擬「建置失敗」
      - name: Simulate build failure
        if: ${{ inputs.simulate_build_fail == true }}
        run: |
          echo "::warning::Simulating BUILD failure"
          exit 1

      # …你的真實部署/釋出步驟放在這之前/之後皆可 …

      # ✅ 模擬「Release 失敗」
      - name: Create or Update Dev Release (idempotent)
  env:
    GH_TOKEN: ${{ github.token }}                # 讓 gh CLI 取得授權
    TAG: ${{ steps.tagprep.outputs.TAG }}        # 你的前一步產生的 TAG
  run: |
    set -euo pipefail

    # 確保本地/遠端 tag 存在（若已存在則跳過）
    if ! git rev-parse -q --verify "refs/tags/$TAG" >/dev/null; then
      git tag -f "$TAG"
      git push -f origin "refs/tags/$TAG"
    fi

    # 若 Release 已存在 → 更新；否則 → 建立
    if gh release view "$TAG" >/dev/null 2>&1; then
      echo "Release $TAG exists; updating assets..."
      # 例：上傳/覆蓋產物
      gh release upload "$TAG" build.zip --clobber
      # 也可同步更新標題/說明（可選）
      gh release edit "$TAG" --title "$TAG" --notes "Dev release (rerun ${{ github.run_attempt }})"
    else
      echo "Release $TAG not found; creating..."
      gh release create "$TAG" build.zip --title "$TAG" --notes "Dev release"
    fi

      - name: Simulate release failure (staging)
        if: ${{ inputs.simulate_release_fail == true }}
        run: |
          echo "::warning::Simulating RELEASE failure"
          exit 1

      # ✅ 模擬「Slack 通知失敗」
      - name: Slack notify (fake)
        if: ${{ inputs.simulate_slack_fail == false }}
        run: |
          echo "Pretend to send Slack notification…"

      - name: Simulate Slack notification failure (staging)
        if: ${{ inputs.simulate_slack_fail == true }}
        run: |
          echo "::warning::Simulating SLACK failure"
          exit 1

      # ✅ Summary
      - name: Complete job
        if: always()
        run: |
          {
            echo "## deploy-dev summary"
            echo ""
            echo "- simulate_build_fail: **${{ inputs.simulate_build_fail }}**"
            echo "- simulate_release_fail: **${{ inputs.simulate_release_fail }}**"
            echo "- simulate_slack_fail: **${{ inputs.simulate_slack_fail }}**"
            echo "- simulate_artifact_download_fail: **${{ inputs.simulate_artifact_download_fail }}**"
          } >> $GITHUB_STEP_SUMMARY
